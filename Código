class Usuario:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome.upper()
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco


class ContaCorrente:
    def __init__(self, agencia, numero_conta, usuario):
        self.agencia = agencia
        self.numero_conta = numero_conta
        self.usuario = usuario
        self.saldo = 0
        self.extrato = ""
        self.numero_saques = 0
        self.limite = 500
        self.LIMITE_SAQUES = 3

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.extrato += f"Depósito: R$ {valor:.2f}\n"
            print("\n=== Depósito realizado com sucesso! ===")
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")

    def sacar(self, valor):
        excedeu_saldo = valor > self.saldo
        excedeu_limite = valor > self.limite
        excedeu_saques = self.numero_saques >= self.LIMITE_SAQUES

        if excedeu_saldo:
            print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")
        elif excedeu_limite:
            print("\n@@@ Operação falhou! O valor do saque excede o limite. @@@")
        elif excedeu_saques:
            print("\n@@@ Operação falhou! Número máximo de saques excedido. @@@")
        elif valor > 0:
            self.saldo -= valor
            self.extrato += f"Saque: R$ {valor:.2f}\n"
            self.numero_saques += 1
            print("\n=== Saque realizado com sucesso! ===")
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")

    def ver_extrato(self):
        print("\n================ EXTRATO ================")
        print("Não foram realizadas movimentações." if not self.extrato else self.extrato)
        print(f"\nSaldo: R$ {self.saldo:.2f}")
        print("==========================================")


class Banco:
    def __init__(self):
        self.agencia = "0001"
        self.usuarios = []
        self.contas = []
        self.numero_conta_sequencial = 1

    def cadastrar_usuario(self):
        cpf = input("Informe o CPF (somente números): ")
        
        # Verifica se usuário já existe
        usuario = self.filtrar_usuario(cpf)
        if usuario:
            print("\n@@@ Já existe usuário com esse CPF! @@@")
            return None

        nome = input("Informe o nome completo: ")
        data_nascimento = input("Informe a data de nascimento (dd/mm/aaaa): ")
        endereco = input("Informe o endereço (logradouro, bairro, cidade/UF): ")

        # Validações básicas
        if not nome.replace(" ", "").isalpha():
            print("\n@@@ Nome deve conter apenas letras! @@@")
            return None
            
        if not cpf.isdigit():
            print("\n@@@ CPF deve conter apenas números! @@@")
            return None

        novo_usuario = Usuario(nome, data_nascimento, cpf, endereco)
        self.usuarios.append(novo_usuario)
        print("\n=== Usuário criado com sucesso! ===")
        return novo_usuario

    def filtrar_usuario(self, cpf):
        for usuario in self.usuarios:
            if usuario.cpf == cpf:
                return usuario
        return None

    def criar_conta_corrente(self):
        cpf = input("Informe o CPF do usuário: ")
        usuario = self.filtrar_usuario(cpf)
        
        if not usuario:
            print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")
            return None

        numero_conta = f"{self.numero_conta_sequencial:06d}"
        nova_conta = ContaCorrente(self.agencia, numero_conta, usuario)
        self.contas.append(nova_conta)
        self.numero_conta_sequencial += 1
        
        print("\n=== Conta criada com sucesso! ===")
        print(f"Agência: {nova_conta.agencia} | Conta: {nova_conta.numero_conta}")
        return nova_conta

    def listar_contas(self):
        if not self.contas:
            print("\n@@@ Nenhuma conta cadastrada! @@@")
            return

        print("\n================ CONTAS ================")
        for conta in self.contas:
            linha = f"""\
                Agência:\t{conta.agencia}
                C/C:\t\t{conta.numero_conta}
                Titular:\t{conta.usuario.nome}
            """
            print(linha)
        print("========================================")


def main():
    banco = Banco()

    menu = """
    [d] Depositar
    [s] Sacar
    [e] Extrato
    [u] Criar Usuário
    [c] Criar Conta
    [l] Listar Contas
    [q] Sair

    => """

    while True:
        opcao = input(menu)

        if opcao == "d":
            numero_conta = input("Informe o número da conta: ")
            conta = next((c for c in banco.contas if c.numero_conta == numero_conta), None)
            
            if not conta:
                print("\n@@@ Conta não encontrada! @@@")
                continue

            valor = float(input("Informe o valor do depósito: "))
            conta.depositar(valor)

        elif opcao == "s":
            numero_conta = input("Informe o número da conta: ")
            conta = next((c for c in banco.contas if c.numero_conta == numero_conta), None)
            
            if not conta:
                print("\n@@@ Conta não encontrada! @@@")
                continue

            valor = float(input("Informe o valor do saque: "))
            conta.sacar(valor)

        elif opcao == "e":
            numero_conta = input("Informe o número da conta: ")
            conta = next((c for c in banco.contas if c.numero_conta == numero_conta), None)
            
            if not conta:
                print("\n@@@ Conta não encontrada! @@@")
                continue

            conta.ver_extrato()

        elif opcao == "u":
            banco.cadastrar_usuario()

        elif opcao == "c":
            banco.criar_conta_corrente()

        elif opcao == "l":
            banco.listar_contas()

        elif opcao == "q":
            break

        else:
            print("\n@@@ Operação inválida, por favor selecione novamente a operação desejada. @@@")


if __name__ == "__main__":
    main()
